package com.pod2.wastewise.service;

import com.pod2.wastewise.exception.WorkerNotFoundException;
import com.pod2.wastewise.model.Worker;
import com.pod2.wastewise.repository.WorkerRepository;
import com.pod2.wastewise.utility.IdGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class WorkerService {

    @Autowired
    private IdGenerator idGenerator;

    private static final Logger logger = LoggerFactory.getLogger(WorkerService.class);

    private WorkerRepository workerRepository;

    public WorkerService(WorkerRepository workerRepository){
        this.workerRepository = workerRepository;
    }

    /**
     * Writing a method to create a worker
     * Worker Id is autogenerated.
     * The UI should not allow the
     * @param worker
     * @return saved worker
     */
    public Worker createWorker(Worker worker) {
        String id = idGenerator.generateWorkerId();
        worker.setWorkerId(id);
        logger.info("Creating worker with id: {}", id);
        return workerRepository.save(worker);
    }

    /**
     * searching for a worker in the database
     * throws worker not found exception if worker with give id does not exist in the database
     * @param id
     * @return
     * @throws WorkerNotFoundException
     */
    public Worker findWorker(String id) throws WorkerNotFoundException {
        Optional<Worker> optionalWorker =  workerRepository.findById(id);
        if(optionalWorker.isEmpty()){
            logger.error("Worker with id {}, not found", id);
            throw new WorkerNotFoundException("Worker with id: " + id + " does not exist");
        }
        logger.info("Found worker with id {}", id);
        return optionalWorker.get();
    }

    /**
     * method to update existing worker information in the database
     * if worker with the given id is not found, then it throws worker not found exception
     * @param worker
     * @return
     * @throws WorkerNotFoundException
     */
    public Worker updateWorker(Worker worker) throws WorkerNotFoundException{
        Optional<Worker> optionalWorker = workerRepository.findById(worker.getWorkerId());
        if(optionalWorker.isEmpty()){
            logger.error("Worker with id {}, not found to update", worker.getWorkerId());
            throw new WorkerNotFoundException("Worker with id " + worker.getWorkerId() + " does not exist");
        }
        else if(optionalWorker.get() == worker){
            logger.info("No changes to update in worker with id {}", worker.getWorkerId());
            return worker;
        }
        logger.info("Updating worker with id {}", worker.getWorkerId());
        Worker workerTemp = optionalWorker.get();
        workerTemp.setName(worker.getName());
        workerTemp.setContactNumber(worker.getContactNumber());
        workerTemp.setContactEmail(worker.getContactEmail());
        workerTemp.setWorkerStatus(worker.getWorkerStatus());
        workerTemp.setUpdatedBy(worker.getUpdatedBy());
        workerTemp.setUpdatedDate(worker.getUpadatedDate());
        logger.info("Updated worker with id {}", worker.getWorkerId());

        return workerRepository.save(workerTemp);
    }

    /**
     * method to delete the worker with id
     * throws exception if worker is not found
     * deletes the object and returns the worker object, in case if the details are required to be shown regarding what object was deleted
     * @param id
     * @return worker
     * @throws WorkerNotFoundException
     */
    public Worker deleteWorker(String id) throws WorkerNotFoundException{
        logger.info("Finding worker with id {}", id);
        Optional<Worker> optionalWorker = workerRepository.findById(id);
        if(optionalWorker.isEmpty()){
            logger.info("Cannot delete the Worker with id {}, as it does not exist", id);
            throw new WorkerNotFoundException("Cannot delete the Worker with id " + id + " as it does not exist");
        }
        Worker workerTemp = optionalWorker.get();
        workerRepository.deleteById(id);
        logger.info("Deleted worker with id {}", id);
        return workerTemp;
    }
}
